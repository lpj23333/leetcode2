int minSideJumps(int* obstacles, int obstaclesSize){
    int n = obstaclesSize;
    int dp[n][3];
    int i;
    dp[0][0] = 1;  /* 初始状态, 中间的路为0 */
    dp[0][1] = 0;
    dp[0][2] = 1;
    for (i = 1; i < n; i++) {
        if (obstacles[i] == 0) { /* 3条道都没有障碍物, 可以从其他道跳过来 */
            dp[i][0] = fmin(dp[i-1][0], fmin(dp[i-1][1], dp[i-1][2]) + 1);
            dp[i][1] = fmin(dp[i-1][1], fmin(dp[i-1][0], dp[i-1][2]) + 1);
            dp[i][2] = fmin(dp[i-1][2], fmin(dp[i-1][0], dp[i-1][1]) + 1);
        } else {                /* 存在障碍物, 障碍物不能走, 其他两条路可以跳过来 */
            dp[i][obstacles[i] - 1]     = n;
            dp[i][obstacles[i] % 3]     = fmin(dp[i-1][obstacles[i] % 3], 
                                               dp[i-1][(obstacles[i] + 1) % 3] + 1);
            dp[i][(obstacles[i]+1) % 3] = fmin(dp[i-1][(obstacles[i] + 1) % 3], 
                                               dp[i-1][obstacles[i] % 3] + 1);
        }
    }
    return fmin(dp[i-1][0], fmin(dp[i - 1][1], dp[i-1][2]));
}
