#include <math.h>
#include <string.h>

int lowbit(int x) { return x & (-x); }

void update(int* tree, int x, int n) {
    while (x <= n) {
        ++tree[x];
        x += lowbit(x);
    }
}

int query_pre(int* tree, int x) {
    int ans = 0;
    while (x) {
        ans += tree[x];
        x -= lowbit(x);
    }
    return ans;
}

int query(int* tree, int x, int y) {
    return query_pre(tree, y) - query_pre(tree, x - 1);
}

char* minInteger(char* num, int k) {
    int n = strlen(num);
    int* tree = (int*)malloc(sizeof(int) * (n + 1));
    memset(tree, 0, sizeof(int) * (n + 1));

    int** pos = (int**)malloc(sizeof(int*) * 10);
    for (int i = 0; i < 10; i++) {
        pos[i] = (int*)malloc(sizeof(int) * (n + 1));
    }

    int* len = (int*)malloc(sizeof(int) * 10);
    memset(len, 0, sizeof(int) * 10);
    int* add = (int*)malloc(sizeof(int) * 10);
    memset(add, 0, sizeof(int) * 10);

    for (int i = 0; i < n; ++i) {
        pos[num[i] - '0'][len[num[i] - '0']++] = i + 1;
    }
    char* ans = (char*)malloc(sizeof(char) * (n + 1));
    ans[n] = '\0';
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (add[j] < len[j]) {
                int behind = query(tree, pos[j][add[j]] + 1, n);
                int dist = pos[j][add[j]] + behind - i;
                if (dist <= k) {
                    update(tree, pos[j][add[j]], n);
                    add[j]++;
                    ans[i - 1] = (j + '0');
                    k -= dist;
                    break;
                }
            }
        }
    }
    return ans;
}
