int cmp_array(const void *_a, const void *_b) {
    int *a = *(int **)_a;
    int *b = *(int **)_b;
    return a[1] <= b[1] ? -1 : 1;
}

int binaryFind(int **events, int size, int target) {
    int left = 0;
    int right = size - 1;
    while (left <= right) {
        int mid = (right - left) / 2 + left;
        if (events[mid][1] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return right;
}

int maxValue(int **events, int eventsSize, int *eventsColSize, int k) {
    qsort(events, eventsSize, sizeof(events[0]), cmp_array);
    int prev[eventsSize + 5];
    for (int i = 0; i < eventsSize; i++) {
        prev[i] = binaryFind(events, eventsSize, events[i][0]);
    }
    int dp[eventsSize + 5][k + 5];
    memset(dp, 0, sizeof(dp));
    for (int i = 1; i <= eventsSize; i++) {
        for (int j = 1; j <= k; j++) {
            dp[i][j] = fmax(dp[i - 1][j], dp[prev[i - 1] + 1][j - 1] + events[i - 1][2]);
        }
    }
    return dp[eventsSize][k];
}
