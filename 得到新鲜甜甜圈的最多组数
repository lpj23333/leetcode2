#define MAXN 9

int help[MAXN + 1] = { 1, 1 };
void de_cantor(int batch, int n, int out[]) {
    for (int i = batch - 1; i >= 0; --i) {
        out[i] = n / help[i];
        n -= out[i] * help[i];
    }
}
int maxHappyGroups(int batch, int *groups, int size) {
    int total = 1, ds[batch], sum = 0;
    memset(ds, 0, sizeof(ds));
    for (int i = 0; i < size; ++i) {
        ds[groups[i] %= batch]++;
    }
    for (int i = 1; i < batch; ++i) {
        sum = (sum + ds[i] * i) % batch;
        help[i + 1] = total *= ds[i] + 1;
    }

    int dp[total], out[batch];
    memset(dp, 0, sizeof(dp));

    dp[0] = ds[0] + (sum > 0);
    for (int i = 0; i < total; ++i) {
        int ts = 0;
        de_cantor(batch, i, out);
        for (int j = 1; j < batch; ++j) {
            ts = (ts + out[j] * j) % batch;
        }
        for (int j = 1; j < batch; ++j) {
            if (out[j] == ds[j]) continue; // 当前余数用尽了
            dp[i + help[j]] = fmax(dp[i + help[j]], dp[i] + ((ts + j) % batch == 0));
        }
    }

    return dp[total - 1];
}
