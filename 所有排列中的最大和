typedef struct Node{
    int times;//下标出现次数
    int index;//下标
} node;
//降序排序
int cmp(const void *a,const void *b){
    return *(int *)b - *(int *)a;
}
//按照出现次数times字段降序排序
int listcmp(const void *a,const void *b){
    return ((node *)b)->times - ((node *)a)->times;
}
int maxSumRangeQuery(int* nums, int numsSize, int** requests, int requestsSize, int* requestsColSize){
    int k = 1000000007;
    long long res = 0;
    int *nums2 = (int *)malloc(numsSize * sizeof(int));
    int *cnt = (int *)malloc(numsSize * sizeof(int));
    int *diff = (int *)malloc((numsSize+1) * sizeof(int));
    node *list = (node *)malloc(numsSize * sizeof(node));
    int *pre = (int *)malloc(numsSize * sizeof(int));
    memset(pre,0,numsSize * sizeof(int));
    memset(nums2,0,numsSize * sizeof(int));
    memset(cnt,0,numsSize * sizeof(int));
    memset(diff,0,(numsSize+1) * sizeof(int));
    memset(list,0,numsSize * sizeof(node));

    //对原数组降序排序
    qsort(nums,numsSize,sizeof(int),cmp);
    //先统计requests中下标以及下标出现次数
    //比如[1,3]，就是下标1,2,3 的出现次数都+1，对某一段数组加1，此处用到差分数组diff；cnt[i]记录下标i出现次数，diff是它的差分数组
    //计算差分数组
    for(int i=0;i<requestsSize;i++){
        diff[requests[i][1] + 1]--;
        diff[requests[i][0]]++;
    }
    //计算cnt数组
    cnt[0] = diff[0];
    for(int i=1;i<numsSize;i++){
        cnt[i] = cnt[i-1] + diff[i];
    }
    //将下标和对应的出现次数放到一个结构体数组list中
    for(int i=0;i<numsSize;i++){
        list[i].times = cnt[i];
        list[i].index = i;
    }
    //对list按照出现次数降序排序
    qsort(list,numsSize,sizeof(node),listcmp);

    //按照元素从大到小和下标出现次数从多到少，依次赋值到保存到nums2[]中，这样nums[出现次数最多的下标] = 最大元素，nums[出现次数第二多的下标]=第二大元素……
    for(int i=0;i<numsSize;i++){
        nums2[list[i].index] = nums[i]; 
    }
    //此时nums2就是总和最大的排列，求其前缀和数组，值太大，可以先%k
    pre[0] = nums2[0];
    for(int i=1;i<numsSize;i++){
        pre[i] = (nums2[i] + pre[i-1])%k;
    }
    //最后遍历requests数组，将每一段子数组的和加到结果res上
    for(int i=0;i<requestsSize;i++){
        if(requests[i][0] >0){
            res += pre[requests[i][1]] - pre[requests[i][0]-1];
        }else{
            res += pre[requests[i][1]];
        }
    }
    return res%k;
}
