int minSpaceWastedKResizing(int* nums, int numsSize, int k) {
    int n = numsSize, g[n][n], f[n][k + 2];
    for (int i = 0; i < n; i++) {
        int max = 0, sum = 0;
        for (int j = i; j < n; j++) {
            sum += nums[j];
            max = (nums[j] > max ? nums[j] : max);
            g[i][j] = (j - i + 1) * max - sum;
            //printf("g[%d][%d] = %d\n", i, j, g[i][j]);
        }
    }
    for (int i = 0; i < n; i++) {
        f[i][0] = INT_MAX / 2;
        for (int j = 1; j < k + 2; j++) {
            f[i][j] = g[0][i];
            for (int i0 = 1; i0 <= i; i0++) {
                f[i][j] = (f[i][j] > (f[i0 - 1][j - 1] + g[i0][i]) ? (f[i0 - 1][j - 1] + g[i0][i]) : f[i][j]);
                //printf("f[%d][%d] = %d\n", i, j, f[i][j]);
            }
        }
    }
    return f[n - 1][k + 1];
}
