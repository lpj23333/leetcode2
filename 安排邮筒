void localqsort(int *a, int len){
    int i=0,j=len -1,k=0;
    if(len<=1){
        return;
    }
    while(i<j){
        while(i<j&&*(a+i) <= *(a+j)){
            i++;
        }
        if(*(a+i) > *(a+j)){
            k = *(a+i);
            *(a+i) = *(a+j);
            *(a+j) = k;
        }
        while(i<j&&*(a+i) <= *(a+j)){
            j--;
        }
        if(*(a+i) > *(a+j)){
            k = *(a+i);
            *(a+i) = *(a+j);
            *(a+j) = k;
        }
    }
    localqsort(a,i);
    if(i<len -1){
        localqsort(a+i+1,len-1-i);
    }
}

int dfsGetMinDisSum(int i,int j, int *houses,int **dis){
    if(j>i&&*(*(dis+i)+j) > 0){
        return *(*(dis+i)+j);
    }
    if(j<=i){
        *(*(dis+i)+j) = 0;
        return *(*(dis+i)+j);
    }
    if(j==i+1){
        *(*(dis+i)+j) = *(houses+j) - *(houses+i);
    }else{
        *(*(dis+i)+j) = dfsGetMinDisSum(i,j-1,houses,dis)+*(houses+j) - *(houses+(i+j)/2);
    }
    return *(*(dis+i)+j);
}

int localmin(int a, int b){
    return a<b?a:b;
}

int minDistance(int* houses, int housesSize, int k){
    localqsort(houses,housesSize);
    int ret;
    int **dp = malloc(sizeof(int *)*(housesSize+1));
    int **dis = malloc(sizeof(int *)*housesSize);
    int i=0,j=0,m=0;
    for(i=0;i<housesSize;i++){
        *(dis+i) = malloc(sizeof(int)*housesSize);
        memset(*(dis+i),0,sizeof(int)*housesSize);
    }
    *(dp+0) = malloc(sizeof(int)*(k+1));
    memset(*(dp+0),0,sizeof(int)*(k+1));
    for(i=1;i<=housesSize;i++){
        *(dp+i) = malloc(sizeof(int)*(k+1));
        *(*(dp+i)+0) = 0;
        *(*(dp+i)+1) = dfsGetMinDisSum(0,i-1,houses,dis);
        for(j=2;j<=k;j++){
            *(*(dp+i)+j) = 10000;
            if(i<=j){
                *(*(dp+i)+j)=0;
            }else{
                for(m=j-1;m<i;m++){
                    *(*(dp+i)+j) = localmin(*(*(dp+i)+j),*(*(dp+m)+j-1)+dfsGetMinDisSum(m,i-1,houses,dis));
                }
            }
        }
    }

    ret = *(*(dp+housesSize)+k);
    return ret;
}
