#define MAX(a, b) ((a) > (b) ? (a) : (b))

void dfs(const int** requests, int requestsSize,int n, int pos, int * delta, int * ans, int * cnt, int * zero) {
    if (pos == requestsSize) {
        if (*zero == n) {
            *ans = MAX(*ans, *cnt);
        }
        return;
    }

    // 不选 requests[pos]
    dfs(requests, requestsSize, n, pos + 1, delta, ans, cnt, zero);

    // 选 requests[pos]
    int z = *zero;
    ++*cnt;
    const int * r = requests[pos];
    int x = r[0], y = r[1];
    *zero -= delta[x] == 0;
    --delta[x];
    *zero += delta[x] == 0;
    *zero -= delta[y] == 0;
    ++delta[y];
    *zero += delta[y] == 0;
    dfs(requests, requestsSize, n, pos + 1, delta, ans, cnt, zero);
    --delta[y];
    ++delta[x];
    --*cnt;
    *zero = z;
}

int maximumRequests(int n, int** requests, int requestsSize, int* requestsColSize) {
    int * delta = (int *)malloc(sizeof(int) * n);
    memset(delta, 0, sizeof(int) * n);
    int ans = 0, cnt = 0, zero = n;
    dfs(requests, requestsSize, n, 0, delta, &ans, &cnt, &zero);
    return ans;
}
