int cmp(int *x, int *y)
{
    return *y - *x;
}

int minimumSize(int* nums, int numsSize, int maxOperations){
    qsort(nums, numsSize, sizeof(int), cmp);
    int left = nums[0], right = 1;
    int mid, ans, res;

    while (left >= right) {
        mid = (right - left) / 2 + left;
        int sumOperations = 0;
        for (int i = 0; i < numsSize; i++) {
            if (nums[i] <= mid) {
                // 后续值无需拆分
                break;
            } else {
                // 向上取整
                sumOperations += (nums[i] + mid - 1) / mid - 1;
            }
        }
        if (sumOperations <= maxOperations) {
            // 仅需要sumOperations， 开销为mid，仍可提升次数
            left = mid -1;
            ans = mid;
        } else {
            right = mid + 1;
        }
    }
    return ans;
}
