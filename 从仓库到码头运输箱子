#define MAX_LEN 100000

int boxDelivering(int** boxes, int boxesSize, int* boxesColSize, int portsCount, int maxBoxes, int maxWeight){
    int i, j, head = 0, tail = 0, n = boxesSize, queue[MAX_LEN] = {0};
    long long int neg[n + 1], weight[n + 1], f[n+1], g[n + 1];
    memset(neg, 0, sizeof(neg));
    memset(weight, 0, sizeof(weight));
    memset(f, 0, sizeof(f));
    memset(g, 0, sizeof(g));
    neg[1] = 0, weight[0] = 0;
    for(i = 1; i <= n; i++) {
        if(i > 1) {
            neg[i] = neg[i - 1] + (boxes[i - 1][0] != boxes[i - 2][0]); // neg[i]表示前i个箱子相邻两个箱子对应码头不同的次数
        }
        weight[i] = weight[i - 1] + boxes[i - 1][1]; // weight[i]表示前i个箱子的总重量
    }
    f[0] = 0; // f[i]表示运送前i个箱子需要的最少行程数
    queue[tail++] = 0;
    for(i = 1; i <= n; i++) {
        while(tail > head && (i - queue[head] > maxBoxes || weight[i] - weight[queue[head]] > maxWeight)) {
            head++;
        }
        f[i] = g[queue[head]] + neg[i] + 2;
        if(i != n) {
            g[i] = f[i] - neg[i + 1];
            while(tail > head && g[i] <= g[queue[tail - 1]]) {
                tail--;
            }
            queue[tail++] = i;
        }
    }
    return f[n];
}
