int direction[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
bool dfs(char ** grid,bool ** vis,int gridSize,int gridColSize,int x,int y,int fx,int fy);
bool containsCycle(char** grid, int gridSize, int* gridColSize){
    bool ** vis = malloc(sizeof(bool*)*gridSize);
    for(int i=0;i<gridSize;i++)
       vis[i] = malloc(sizeof(bool)*(*gridColSize)),memset(vis[i],0,sizeof(bool)*(*gridColSize));
    bool ans = false;
    for(int i=0;i<gridSize;i++)
    {
        for(int j=0;j<(*gridColSize);j++)
        {
            if(!vis[i][j])
            ans = ans||dfs(grid,vis,gridSize,*gridColSize,i,j,-1,-1);
        }
    }
    return ans;
}
bool dfs(char ** grid,bool ** vis,int gridSize,int gridColSize,int x,int y,int fx,int fy)
{
    int ans = false;
    vis[x][y] = true;
    for(int i=0;i<4;i++)
    {
        int dx = x+direction[i][0];
        int dy = y+direction[i][1];

        if(dx>=0&&dx<gridSize&&dy>=0&&dy<gridColSize)
        {
            if(grid[dx][dy] == grid[x][y])
            {
                if(!vis[dx][dy])
                {
                    ans = ans || dfs(grid,vis,gridSize,gridColSize,dx,dy,x,y);
                } 
                else if(dx!=fx&&dy!=fy) return true;
            }
        }
    }
    return ans;
}
