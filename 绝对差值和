int lower_bound(int* a, int n, int x) {
    int l = 0, r = n;
    while (l < r) {
        int mid = (l + r) >> 1;
        if (a[mid] < x) {
            l = mid + 1;
        } else {
            r = mid;
        }
    }
    return l;
}

int cmp(int* a, int* b) {
    return *a - *b;
}

const int mod = 1000000007;

int minAbsoluteSumDiff(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int n = nums1Size;
    int rec[n];
    memcpy(rec, nums1, sizeof(int) * n);
    qsort(rec, n, sizeof(int), cmp);
    int sum = 0, maxn = 0;
    for (int i = 0; i < n; i++) {
        int diff = abs(nums1[i] - nums2[i]);
        sum = (sum + diff) % mod;
        int j = lower_bound(rec, n, nums2[i]);
        if (j < n) {
            maxn = fmax(maxn, diff - (rec[j] - nums2[i]));
        }
        if (j > 0) {
            maxn = fmax(maxn, diff - (nums2[i] - rec[j - 1]));
        }
    }
    return (sum - maxn + mod) % mod;
}
