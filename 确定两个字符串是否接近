int compareFunc(void *a,void *b)
{
    if(*(int *)a >= *(int *)b)
    {
        return 1;
    }
    return -1;
}


bool closeStrings(char * word1, char * word2)
{
    int lenW1 = strlen(word1);
    int lenW2 = strlen(word2);
    if(lenW1 != lenW2)
    {
        return false;
    }
    
    int i;
    int vatW1[26] = {0};
    int vatW2[26] = {0};
    for(i =0; i <lenW1; i++ )
    {
        vatW1[word1[i] - 'a'] ++;
        vatW2[word2[i] - 'a'] ++;
    }
    

    for(i =0; i < 26 ; i++)
    {
        if(vatW1[i])
        {
            //存在一个只有W1只有字符
            if(!vatW2[i])
            {
                return false;
            }
        }
        else
        {
             //存在一个只有W2只有字符
            if(vatW2[i])
            {
                return false;
            }
        }
    }
    //出现的次数，从小到大重新排列，
    //因为字母时可以相互变来变去的，所以只考虑出现的次数便可
    qsort(vatW1,26,sizeof(int),compareFunc);
    qsort(vatW2,26,sizeof(int),compareFunc);
    for(i =0; i < 26 ; i++)
    {
        if(vatW1[i] != vatW2[i]) 
        {
            return false;
        }
    }

    return true;
}
