int g_dir[4][2] = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}};
int **g_map;
int **g_isvisited;
bool dfs(int row, int col, int x, int y)
{
    if (x < 1 || y < 1 || x > row || y > col || g_isvisited[x][y] == 1) {
        return false;
    }
    
    g_isvisited[x][y] = 1;

	if (g_map[x][y] == 1) {
		return false;
	}
    
    if (x == row) {
        return true;
    }
    
    for (int i = 0; i < 4; i++) {
        int nx = x + g_dir[i][0];
        int ny = y + g_dir[i][1];
        bool ret = dfs(row, col, nx, ny);
        if (ret) {
            return true;
        }
    }

    return false;
}

bool canCross(int row, int col, int** cells, int n)
{
    for (int i = 1; i <= row; i++) {
        memset(g_map[i], 0, sizeof(int) * (col + 1));
    }
    for (int i = 0; i < n; i++) {
        int x = cells[i][0];
        int y = cells[i][1];
        g_map[x][y] = 1;
    }
    
    for (int y = 1; y <= col; y++) {
        for (int i = 1; i <= row; i++) {
            memset(g_isvisited[i], 0, sizeof(int) * (col + 1));
        }
        if (dfs(row, col, 1, y)) {
            return true;
        }
    }

    return false;
}

int latestDayToCross(int row, int col, int** cells, int cellsSize, int* cellsColSize)
{
    g_map = (int **)malloc(sizeof(int *) * (row + 1));
    g_isvisited = (int **)malloc(sizeof(int *) * (row + 1));
    for (int i = 1; i <= row; i++) {
        g_map[i] = (int *)calloc((col + 1), sizeof(int));
        g_isvisited[i] = (int *)calloc((col + 1), sizeof(int));
    }
    int l = 0;
    int r = cellsSize - 1;
    
    while (l <= r) {
        int m = l + (r - l) / 2;
        bool c = canCross(row, col, cells, m);
        if (c) {
            l = m + 1;
        } else {
            r = m - 1;
        }
    }
    return r;
}
