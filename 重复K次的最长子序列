#define mod 10000003
int map[10000003];
char* S;
int len, L;
int serch(char str[],int k) {
    int i, j, sum = 0;
    for (i = 0, j = 0; i < L; i++) {
        if (S[i] == str[j])j++;
        if (j == len) {
            sum++; j = 0; if (sum >= k)return 1;
        }
    }
    return sum >= k;
}

void dfs(char str[],int pos, int l, int target, int k, unsigned long long value,long long dep,char *res) {
    if (map[value % mod] == 0)return;
    if (l == target) {
        len = l;
        if (serch(str,k) == 1) {
            int i; 
            for (i = 0; i < len; i++) {
                res[i] = str[i];
            }res[i] = 0;
        }
        else map[value%mod] = 0;
        return;
    }
    for (char c = 'a'; c <= 'z'; c++) {
        str[pos] = c;
        unsigned long long newvalue = value + (c - 'a' + 1) * dep;
        dfs(str,pos + 1, l + 1, target, k,newvalue,(dep*31)%1000000007,res);
    }
}
char * longestSubsequenceRepeatedK(char * s, int k){
    memset(map, -1, sizeof(map));
    char* res = (char*)malloc(9); L = strlen(s); S = s;
    int i, j, right = 0;
    char str[10];
    for (i = 0; i <= 8; i++) {
        dfs(str,0, 0, i, k,0,1,res);
    }
    return res;
}
