
int longestSubarray(int* nums, int n, int limit){
    int log2[n + 3];
    log2[1] = 0;
    log2[2] = 1; 
    for (int i = 3; i <= n; ++i) {
        log2[i] = log2[i >> 1] + 1;
    }

    int f[n + 1][log2[n] + 1][2];
    for (int i = 0; i < n; ++i) {
        f[i][0][0] = nums[i];
        f[i][0][1] = nums[i];
    }
    for (int j = 1; j <= log2[n]; ++j) {
        for (int i = 0; i + (1 << j) - 1 < n; ++i) {
            f[i][j][0] = fmax(f[i][j - 1][0], f[i + (1 << (j - 1))][j - 1][0]);
            f[i][j][1] = fmin(f[i][j - 1][1], f[i + (1 << (j - 1))][j - 1][1]);
        }
    }

    int l = 0, r = 0;
    while (r < n) {
        int s = log2[r - l + 1];
        int mx = fmax(f[l][s][0], f[r - (1 << s) + 1][s][0]);
        int mn = fmin(f[l][s][1], f[r - (1 << s) + 1][s][1]);
        if (mx - mn > limit) {
            ++l;
        }
        ++r;
    }
    return r - l;
}
