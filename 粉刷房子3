const int INFTY = 0x3f3f3f3f;

int minCost(int* houses, int housesSize, int** cost, int costSize, int* costColSize, int m, int n, int target) {
    // 将颜色调整为从 0 开始编号，没有被涂色标记为 -1
    for (int i = 0; i < housesSize; ++i) {
        houses[i]--;
    }

    // dp 所有元素初始化为极大值
    int dp[m][n][target];
    memset(dp, 0x3f, sizeof(dp));

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (houses[i] != -1 && houses[i] != j) {
                continue;
            }

            for (int k = 0; k < target; ++k) {
                for (int j0 = 0; j0 < n; ++j0) {
                    if (j == j0) {
                        if (i == 0) {
                            if (k == 0) {
                                dp[i][j][k] = 0;
                            }
                        } else {
                            dp[i][j][k] = fmin(dp[i][j][k], dp[i - 1][j][k]);
                        }
                    } else if (i > 0 && k > 0) {
                        dp[i][j][k] = fmin(dp[i][j][k], dp[i - 1][j0][k - 1]);
                    }
                }

                if (dp[i][j][k] != INFTY && houses[i] == -1) {
                    dp[i][j][k] += cost[i][j];
                }
            }
        }
    }

    int ans = INFTY;
    for (int j = 0; j < n; ++j) {
        ans = fmin(ans, dp[m - 1][j][target - 1]);
    }
    return ans == INFTY ? -1 : ans;
}
