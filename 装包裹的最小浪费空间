int cmp(int *a,int *b){
    return *a-*b;
}
int binarysearch(int *nums,int left,int right,int target){
    while(left<=right){
        int mid=left+right>>1;
        if(nums[mid]>=target)
            right=mid-1;
        else
            left=mid+1;
    }
    return left;
}
int minWastedSpace(int* packages, int packagesSize, int** boxes, int boxesSize, int* boxesColSize){
    long prefix[100001]={0},packmax=0;
    for(int i=0;i<packagesSize;i++){
        packmax=fmax(packmax,packages[i]);
        prefix[packages[i]]++;     //计数
    }
    long psum[100001];
    psum[1]=0;
    for(int i=2;i<=100000;i++){
        prefix[i]+=prefix[i-1];     //计算前缀和
        psum[i]=psum[i-1]+prefix[i-1];      //计算单独一个箱子的浪费空间
    }
    long min=LONG_MAX;
    for(int i=0;i<boxesSize;i++){
        int *p=boxes[i];
        qsort(p,boxesColSize[i],sizeof(int),cmp);
        if(p[boxesColSize[i]-1]<packmax)    //判断该供应商是否能够装下所有类型的包裹
            continue;
        int right=binarysearch(p,0,boxesColSize[i]-1,packmax);
        long sum=psum[p[0]];
        for(int j=1;j<=right;j++){
            sum+=psum[p[j]]-psum[p[j-1]]-prefix[p[j-1]]*(p[j]-p[j-1]);      //用psum的求和公式
        }
        min=fmin(min,sum);
    }
    return min<LONG_MAX?min%1000000007:-1;
}
