int r,c;
bool hashTable[905];
int axis[2][2]={{1,0},{0,1}};

int find(int* dad,int i)
{
    return i==dad[i]?i:(dad[i]=find(dad,dad[i]));
}

void merge(int* dad,int i,int j)
{
    dad[find(dad,i)]=find(dad,j);
}

int getPlace(int i,int j)//拉伸图用，方便使用并查集
{
    return i*c+j;
}

bool check(int** grid,int _i,int _j)
{
    int dad[r*c];
    for(int i=0;i<r*c;i++)//初始化并查集
        dad[i]=i;

    if(_i!=-1)//_i=-1，直接判断原图的岛屿是否已分离
        grid[_i][_j]=0;

    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            if(grid[i][j])
            {
                for(int k=0;k<2;k++)//我们只需要遍历岛屿右边和下面即可
                {
                    int x=axis[k][0]+i;
                    int y=axis[k][1]+j;
                    if(x<r&&y<c&&(grid[x][y]==grid[i][j]))
                        merge(dad,getPlace(i,j),getPlace(x,y));
                } 
            }
            else//把水的并查集值全部设为-1
                dad[getPlace(i,j)]=-1;           

    int cnt=0;//记录岛屿数
    memset(hashTable,false,r*c);//每次都初始化哈希表，r*c是并查集大小

    for(int i=0;i<r*c;i++)
        if(dad[i]!=-1&&!hashTable[find(dad,i)])//不是水单元，且没被访问过
        {
            cnt++;
            hashTable[find(dad,i)]=true;
        }

    if(_i!=-1)//复原图
        grid[_i][_j]=1;

    if(cnt>=2||cnt==0)//0说明原图是类似这样[[0,1,0],[0,0,0]](我们把1置0后，则图无岛屿)或图本身无岛屿，但都算已分离
        return true;  
    return false;
}

int minDays(int** grid, int gridSize, int* gridColSize){
    r=gridSize;
    c=gridColSize[0];
    if(check(grid,-1,-1))//看下原图的岛屿是否已分离
        return 0;
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
            if(grid[i][j]&&check(grid,i,j))//将岛屿的该点置为水单元再看看岛屿是否分离
                    return 1;
    return 2;//前两者都不满足
}
