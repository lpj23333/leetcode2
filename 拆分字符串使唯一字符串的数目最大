#define MAX_SIZE 16
#define Max( a , b ) fmax( a , b )

typedef struct Node {

    char str[ 17 ];
    UT_hash_handle hh;

} Node;

char ** buf;
char ** ans;

int ans_len , buf_len;
int bufColSize[ 17 ];
int max;

struct Node * put( char * s , struct Node * hash ) {

    struct Node * tmp = NULL;

    HASH_FIND_STR( hash , s , tmp );

    if( tmp == NULL ) {

        tmp = ( struct Node * )malloc( sizeof( struct Node ) * 1 );

        strcpy( tmp -> str , s );
        HASH_ADD_STR( hash , str , tmp );

    }

    return hash;

}

bool get( char * s , struct Node * hash ) {

    struct Node * tmp = NULL;

    HASH_FIND_STR( hash , s , tmp );

    if( tmp != NULL ) {

        return false;

    }

    return tmp == NULL;

}


void backtrack( int index , int len , int curr , char * s ) {

    if( curr == len ) {

        if( max >= index ) {

            return ;

        }

        bool flag = true;
        struct Node * hash = NULL;

        for( int i = 0 ; i < index ; ++i ) {

            if( get( buf[ i ] , hash ) == false ) {

                flag = false;
                break;

            }

           hash = put( buf[ i ] , hash );

        }

        if( flag == true ) {

            /*
            for( int i = 0 ; i < index ; ++i ) {

                printf( "%s, " , buf[ i ] );

            }
            printf( "\n" );
            */

            max = index;

        }

        return ;

    }

    for( int i = curr ; i < len ; ++i ) {


        buf[ index ][ bufColSize[ index ] ] = s[ i ];
        bufColSize[ index ] += 1;
        
        backtrack( index + 1 , len , i + 1 , s );

    }

    memset( buf[ index ] , 0 , sizeof( char ) * len );
    bufColSize[ index ] = 0;

}

int maxUniqueSplit( char * s ) {

    int len = strlen( s );

    buf_len = 0;
    max = 1;

    buf = ( char ** )malloc( sizeof( char * ) * len );

    memset( bufColSize , 0 , sizeof( int ) * 17 );

    for( int i = 0 ; i < len ; ++i ) {

        buf[ i ] = ( char * )malloc( sizeof( char ) * ( len + 1 ) );

        memset( buf[ i ] , 0 , sizeof( char ) * ( len + 1 ) );

    }

    backtrack( 0 , len , 0 , s );

    return max;

}
