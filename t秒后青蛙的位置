typedef struct AdjacencyNode {
    /* 源节点编号是有数组下标表示 *//* int source;  */
    int destination; /* 目的节点编号 */
    struct AdjacencyNode* next;
} Adjacency;

typedef struct {
    int adjsCount;
    Adjacency* adjs;
    int mul;
    int time;
} UndigraphNode;

typedef struct {
    int graphNodeCount;
    UndigraphNode** ug;
} Undigraph;

void UndigraphAdd(Undigraph* obj, int source, int destination)
{
    if (source >= obj->graphNodeCount || destination >= obj->graphNodeCount) {
        return;
    }

    Adjacency* adj = malloc(sizeof(Adjacency));
    adj->destination = destination;
    adj->next = obj->ug[source]->adjs;
    obj->ug[source]->adjs = adj;
    obj->ug[source]->adjsCount++;
    return;
}

Undigraph* UndigraphInit(int graphNodeCount, int** edges, int edgesSize)
{
    Undigraph* obj = malloc(sizeof(Undigraph));
    obj->graphNodeCount = graphNodeCount;
    obj->ug = malloc(sizeof(UndigraphNode*) * graphNodeCount);
    for (int i = 1; i < graphNodeCount; i++) {
        obj->ug[i] = malloc(sizeof(UndigraphNode));
        obj->ug[i]->adjsCount = 0;
        obj->ug[i]->adjs = NULL;
    }

    for (int i = 0; i < edgesSize; i++) {
        UndigraphAdd(obj, edges[i][0], edges[i][1]);
        UndigraphAdd(obj, edges[i][1], edges[i][0]);
    }

    return obj;
} 

void UndigraphDfs(Undigraph* obj, int source, int destination, int mul, int time)
{
    obj->ug[destination]->mul = mul;
    obj->ug[destination]->time = time;

    Adjacency* adj = obj->ug[destination]->adjs;
    while (adj != NULL) {
        if (adj->destination == source) {
            /* 剔除从哪个节点跳过来的 */
            adj = adj->next;
            continue;
        }

        int count = obj->ug[destination]->adjsCount;
        if (time > 0) {
            count--;   /*  剔除从哪个节点跳过来的 */
        }
        UndigraphDfs(obj, destination, adj->destination, mul * count, time + 1);
        adj = adj->next;
    }
    return;
}

double UndigraphTargetProbabilityAfterTime(Undigraph* obj, int t, int target)
{
    if (obj->ug[target]->time > t) {
        /* 到达目标节点的时间大于给定的时间，说明给定的时间青蛙跳不过去，概率为0 */
        return (double)0.0;
    }
    bool canJump = (target == 1 ? (obj->ug[target]->adjsCount > 0) : (obj->ug[target]->adjsCount > 1));
    if (obj->ug[target]->time < t && canJump) {
        /* 到达目标节点的时间小于给定的时间，说明给定的时间青蛙可以继续朝下跳，如果能朝下跳，停在目标节点的概率为0 */
        return (double)0.0;
    }
    return (double)1.0/obj->ug[target]->mul;
}

double frogPosition(int n, int** edges, int edgesSize, int* edgesColSize, int t, int target)
{
    if (target == 1 && n == 1) {
        return (double)1.0;
    }
    Undigraph* obj = UndigraphInit(n + 1, edges, edgesSize);
    UndigraphDfs(obj, 1, 1, 1, 0);
    double ans = UndigraphTargetProbabilityAfterTime(obj, t, target);
    return ans;
}
